swagger: "2.0"
info:
  title: "Subscription Management Service API"
  description: "A high-performance, scalable microservice for managing user subscriptions built with Go, featuring Redis caching, JWT authentication, and comprehensive API documentation."
  version: "1.0"
  contact: {}
host: "localhost:3000"
basePath: "/api"
schemes:
  - "http"
securityDefinitions:
  BearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "Bearer token authentication"
paths:
  /plans/plans:
    get:
      tags:
        - "plans"
      summary: "Retrieve all subscription plans"
      description: "Get all available subscription plans without authentication"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successfully retrieved all plans"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/models.Plan"
              error:
                type: "null"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/register:
    post:
      tags:
        - "users"
      summary: "Register new user and return JWT token"
      description: "Register a new user with name and password, returns JWT token for authentication"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "input"
          in: "body"
          description: "User registration input"
          required: true
          schema:
            $ref: "#/definitions/handlers.RegisterInput"
      responses:
        "200":
          description: "Successfully registered user"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
                description: "JWT authentication token"
        "400":
          description: "Bad Request - Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /subs/subscription/{planId}:
    post:
      tags:
        - "subscriptions"
      summary: "Create a new subscription"
      description: "Create a new subscription for the authenticated user with the specified plan ID"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      parameters:
        - name: "planId"
          in: "path"
          description: "Plan ID"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successfully created subscription"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/models.Subscription"
              error:
                type: "null"
        "400":
          description: "Bad Request - Invalid plan ID or user already has subscription"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized - Invalid or missing JWT token"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - "subscriptions"
      summary: "Update subscription plan for a user"
      description: "Update the authenticated user's subscription to a new plan"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      parameters:
        - name: "planId"
          in: "path"
          description: "New Plan ID"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successfully updated subscription"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/models.Subscription"
              error:
                type: "null"
        "400":
          description: "Bad Request - Invalid plan ID or no active subscription"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized - Invalid or missing JWT token"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /subs/subscription:
    get:
      tags:
        - "subscriptions"
      summary: "Get current subscription for a user"
      description: "Get the current subscription details for the authenticated user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Successfully retrieved user subscription"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/models.Subscription"
              error:
                type: "null"
        "400":
          description: "Bad Request - User has no subscription"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized - Invalid or missing JWT token"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - "subscriptions"
      summary: "Cancel user subscription"
      description: "Cancel/delete the subscription for the authenticated user by setting status to EXPIRED"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Successfully cancelled subscription"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/models.Subscription"
              error:
                type: "null"
        "400":
          description: "Bad Request - No active subscription to cancel"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized - Invalid or missing JWT token"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  handlers.RegisterInput:
    type: "object"
    required:
      - "name"
      - "password"
    properties:
      name:
        type: "string"
        minLength: 3
        description: "User's name (minimum 3 characters)"
      password:
        type: "string"
        minLength: 6
        description: "User's password (minimum 6 characters)"
  models.Plan:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Unique plan identifier"
      name:
        type: "string"
        description: "Plan name"
      price:
        type: "number"
        format: "float"
        description: "Plan price"
      features:
        type: "object"
        description: "Plan features as JSON object"
      duration_days:
        type: "integer"
        description: "Plan duration in days"
      created_at:
        type: "string"
        format: "date-time"
        description: "Plan creation timestamp"
      updated_at:
        type: "string"
        format: "date-time"
        description: "Plan last update timestamp"
  models.Subscription:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Unique subscription identifier"
      user_id:
        type: "integer"
        description: "Associated user ID"
      plan_id:
        type: "integer"
        description: "Associated plan ID"
      status:
        $ref: "#/definitions/models.SubscriptionStatus"
      start_date:
        type: "string"
        format: "date-time"
        description: "Subscription start date"
      end_date:
        type: "string"
        format: "date-time"
        description: "Subscription end date"
      created_at:
        type: "string"
        format: "date-time"
        description: "Subscription creation timestamp"
      updated_at:
        type: "string"
        format: "date-time"
        description: "Subscription last update timestamp"
  models.SubscriptionStatus:
    type: "string"
    description: "Subscription status"
    enum:
      - "ACTIVE"
      - "INACTIVE"
      - "CANCELLED"
      - "EXPIRED"
    x-enum-varnames:
      - "Active"
      - "Inactive"
      - "Cancelled"
      - "Expired"
  ErrorResponse:
    type: "object"
    properties:
      data:
        type: "null"
      error:
        type: "object"
        description: "Error details"
        additionalProperties:
          type: "string"